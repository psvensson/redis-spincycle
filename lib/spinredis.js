// Generated by CoffeeScript 1.9.1
(function() {
  var spinredis,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  spinredis = (function() {
    function spinredis() {
      this._deRegisterObjectSubscriber = bind(this._deRegisterObjectSubscriber, this);
      this.deRegisterObjectSubscriber = bind(this.deRegisterObjectSubscriber, this);
      this.setWebSocketInstance = bind(this.setWebSocketInstance, this);
    }

    spinredis.prototype.subscribers = [];

    spinredis.prototype.objsubscribers = [];

    spinredis.prototype.objectsSubscribedTo = [];

    spinredis.prototype.outstandingMessages = [];

    spinredis.prototype.modelcache = [];

    redis;

    spinredis.prototype.sessionId = null;

    spinredis.prototype.objects = [];

    spinredis.prototype.failed = function(msg) {
      return console.log('spinclient message failed!! ' + msg);
    };

    spinredis.prototype.setSessionId = function(id) {
      if (id) {
        console.log('++++++++++++++++++++++++++++++++++++++ spinclient setting session id to ' + id);
        return service.sessionId = id;
      }
    };

    spinredis.prototype.dumpOutstanding = function() {};

    spinredis.prototype.setWebSocketInstance = function(io) {
      service.io = io;
      return service.io.on('message', function(reply) {
        var detail, i, index, info, message, status, subscribers;
        status = reply.status;
        message = reply.payload;
        info = reply.info;
        service.dumpOutstanding();
        index = -1;
        if (reply.messageId) {
          i = 0;
          while (i < service.outstandingMessages.length) {
            detail = service.outstandingMessages[i];
            if (detail.messageId === reply.messageId) {
              if (reply.status === 'FAILURE') {
                console.log('spinclient message FAILURE');
                console.dir(reply);
                detail.d.reject(reply);
                break;
              } else {
                detail.d.resolve(message);
                index = i;
                break;
              }
            }
            i++;
          }
          if (index > -1) {
            return service.outstandingMessages.splice(index, 1);
          }
        } else {
          subscribers = service.subscribers[info];
          if (subscribers) {
            return subscribers.forEach(function(listener) {
              return listener(message);
            });
          } else {
            console.log('no subscribers for message ' + message);
            return console.dir(reply);
          }
        }
      });
    };

    spinredis.prototype.registerListener = function(detail) {
      var subscribers;
      console.log('spinclient::registerListener called for ' + detail.message);
      subscribers = service.subscribers[detail.message] || [];
      subscribers.push(detail.callback);
      return service.subscribers[detail.message] = subscribers;
    };

    spinredis.prototype.registerObjectSubscriber = function(detail) {
      var d, localsubs, sid;
      d = $q.defer();
      sid = uuid4.generate();
      localsubs = service.objectsSubscribedTo[detail.id];
      console.log('registerObjectSubscriber localsubs is');
      console.dir(localsubs);
      if (!localsubs) {
        localsubs = [];
        console.log('no local subs, so get the original server-side subscription for id ' + detail.id);
        service._registerObjectSubscriber({
          id: detail.id,
          type: detail.type,
          cb: function(updatedobj) {
            var k, lsubs, results, v;
            console.log('-- registerObjectSubscriber getting obj update callback for ' + detail.id);
            lsubs = service.objectsSubscribedTo[detail.id];
            results = [];
            for (k in lsubs) {
              v = lsubs[k];
              if (v.cb) {
                console.log('--*****--*****-- calling back object update to local sid --****--*****-- ' + k);
                results.push(v.cb(updatedobj));
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        }).then(function(remotesid) {
          localsubs['remotesid'] = remotesid;
          localsubs[sid] = detail;
          console.log('-- adding local callback listener to object updates for ' + detail.id + ' local sid = ' + sid + ' remotesid = ' + remotesid);
          service.objectsSubscribedTo[detail.id] = localsubs;
          return d.resolve(sid);
        });
      }
      return d.promise;
    };

    spinredis.prototype._registerObjectSubscriber = function(detail) {
      var d, subscribers;
      d = $q.defer();
      console.log('message-router registering subscriber for object ' + detail.id + ' type ' + detail.type);
      subscribers = service.objsubscribers[detail.id] || [];
      service.emitMessage({
        target: 'registerForUpdatesOn',
        obj: {
          id: detail.id,
          type: detail.type
        }
      }).then(function(reply) {
        console.log('server subscription id for id ' + detail.id + ' is ' + reply);
        subscribers[reply] = detail.cb;
        service.objsubscribers[detail.id] = subscribers;
        return d.resolve(reply);
      }, function(reply) {
        return service.failed(reply);
      });
      return d.promise;
    };

    spinredis.prototype.deRegisterObjectSubscriber = function(sid, o) {
      var count, j, k, len, localsubs, v;
      localsubs = service.objectsSubscribedTo[o.id] || [];
      if (localsubs[sid]) {
        console.log('deregistering local updates for object ' + o.id);
        delete localsubs[sid];
        count = 0;
        for (v = j = 0, len = localsubs.length; j < len; v = ++j) {
          k = localsubs[v];
          count++;
        }
        if (count === 1) {
          return service._deRegisterObjectSubscriber('remotesid', o);
        }
      }
    };

    spinredis.prototype._deRegisterObjectSubscriber = function(sid, o) {
      var subscribers;
      subscribers = service.objsubscribers[o.id] || [];
      if (subscribers && subscribers[sid]) {
        delete subscribers[sid];
        service.objsubscribers[o.id] = subscribers;
        return service.emitMessage({
          target: 'deRegisterForUpdatesOn',
          id: o.id,
          type: o.type,
          listenerid: sid
        }).then(function(reply) {
          return console.log('deregistering server updates for object ' + o.id);
        });
      }
    };

    spinredis.prototype.emitMessage = function(detail) {
      var d;
      d = $q.defer();
      detail.messageId = uuid4.generate();
      detail.sessionId = service.sessionId;
      detail.d = d;
      service.outstandingMessages.push(detail);
      service.io.emit('message', JSON.stringify(detail));
      return d.promise;
    };

    spinredis.prototype.getModelFor = function(type) {
      var d;
      d = $q.defer();
      if (service.modelcache[type]) {
        d.resolve(service.modelcache[type]);
      } else {
        service.emitMessage({
          target: 'getModelFor',
          modelname: type
        }).then(function(model) {
          service.modelcache[type] = model;
          return d.resolve(model);
        });
      }
      return d.promise;
    };

    spinredis.prototype.listTargets = function() {
      var d;
      d = $q.defer();
      service.emitMessage({
        target: 'listcommands'
      }).then(function(targets) {
        return d.resolve(targets);
      });
      return d.promise;
    };

    spinredis.prototype.flattenModel = function(model) {
      var k, rv, v;
      rv = {};
      for (k in model) {
        v = model[k];
        if (angular.isArray(v)) {
          rv[k] = v.map(function(e) {
            return e.id;
          });
        } else {
          rv[k] = v;
        }
      }
      return rv;
    };

    return spinredis;

  })();

  spinredis.subscribers['OBJECT_UPDATE'] = [
    function(obj) {
      var k, o, prop, results, subscribers, v, val;
      subscribers = service.objsubscribers[obj.id] || [];
      results = [];
      for (k in subscribers) {
        v = subscribers[k];
        if (!service.objects[obj.id]) {
          service.objects[obj.id] = obj;
        } else {
          o = service.objects[obj.id];
          for (prop in obj) {
            val = obj[prop];
            o[prop] = val;
          }
        }
        results.push(v(obj));
      }
      return results;
    }
  ];

  module.exports = spinredis;

}).call(this);

//# sourceMappingURL=spinredis.js.map
